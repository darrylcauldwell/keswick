apiVersion: v1
kind: Namespace
metadata:
  name: ecsmonitoring-ns
spec: {}
status: {}
---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: grafana-pv
  labels:
    type: local
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/pv"
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: ecsmonitoring-ns
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: ecsmonitoring-ns
---

apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
  namespace: ecsmonitoring-ns
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      nodePort: 30777
  type: NodePort
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: ecsmonitoring-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.53.0
        args:
        - '--web.enable-remote-write-receiver'
        - '--config.file=/etc/prometheus/prometheus.yml'
        ports:
        - containerPort: 9090
        resources:
          limits:
            memory: 2Gi
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: ecsmonitoring-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: ecsmonitoring-ns
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsUser: 0
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-pv
            - name: grafana-config-volume
              mountPath: /etc/grafana/
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config-volume
          configMap:
            name: grafana-config
            items:
            - key: grafana.ini
              path: grafana.ini
            - key: datasource.yml
              path: provisioning/datasources/datasource.yml
            - key: dashboards.yml
              path: provisioning/dashboards/dashboards.yml
            - key: dashboard.json
              path: dashboard.json
---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: ecsmonitoring-ns
spec:
  ports:
    - port: 3000
      protocol: TCP
      nodePort: 30888
  selector:
    app: grafana
  type: NodePort